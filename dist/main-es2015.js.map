{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/continent-list/continent-list.component.ts","./src/app/components/continent-list/continent-list.component.html","./src/app/components/countries-list/countries-list.component.ts","./src/app/components/countries-list/countries-list.component.html","./src/app/components/country-detail/country-detail.component.ts","./src/app/components/country-detail/country-detail.component.html","./src/app/components/home/home.component.ts","./src/app/components/home/home.component.html","./src/app/pipes/country-filter.pipe.ts","./src/app/services/coronavirus-data.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './components/home/home.component';\nimport { CountriesListComponent } from './components/countries-list/countries-list.component';\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\nimport { ContinentListComponent } from './components/continent-list/continent-list.component';\n\n\nconst routes: Routes = [\n  {\n  path:'home', component:HomeComponent\n },\n {\n  path:'', redirectTo:'home',pathMatch:'full'\n},\n{\n  path:'**', redirectTo:'home',pathMatch:'full'\n},\n {\n   path:'countries', component:CountriesListComponent\n },\n {\n   path:'countries/:id', component:CountryDetailComponent\n },\n {\n   path:'continents',component:ContinentListComponent\n }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Corona Virus Tracker';\n}\n","<nav class='navbar navbar-expand-lg navbar-light blue primary-color'>\n  <a class=\"navbar-brand\">{{title}}</a>\n  <ul class=\"nav navbar-nav\">\n      <li><a class=\"nav-link\" [routerLink]=\"['/home']\">Global</a></li>\n      <li><a class=\"nav-link\" [routerLink]=\"['/countries']\">Countries</a></li>\n      <li><a class=\"nav-link\" [routerLink]=\"['/continents']\">Continents</a></li>\n    </ul>\n</nav>\n<div class=\"container\">\n  <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CountriesListComponent } from './components/countries-list/countries-list.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\nimport { CountryFilterPipe } from './pipes/country-filter.pipe';\nimport { ContinentListComponent } from './components/continent-list/continent-list.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CountriesListComponent,\n    HomeComponent,\n    CountryDetailComponent,\n    CountryFilterPipe,\n    ContinentListComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { CoronavirusDataService } from 'src/app/services/coronavirus-data.service';\nimport { ICountryData } from 'src/app/interfaces/icountry-data';\n\n@Component({\n  selector: 'app-continent-list',\n  templateUrl: './continent-list.component.html',\n  styleUrls: ['./continent-list.component.css']\n})\nexport class ContinentListComponent implements OnInit {\n\n  continentList:string[]=[\n    'North America','South America','Europe','Africa','Asia','Antartica','Oceania'\n  ];\n\n  unwantedList:string[]=[\n    '','Total:','World'\n  ];\n\n  continentWiseData:ICountryData[]=[];\n\n  pageTitle:string='Confirmed Cases and Deaths by Continent';\n\n  constructor(private coronavirusDataService:CoronavirusDataService) { }\n\n  ngOnInit(): void {\n    this.getContinentWiseCoronavirusData(this.continentList,this.unwantedList);\n  }\n\n  getContinentWiseCoronavirusData(continentList:string[],unwantedList:string[]){\n\n    this.coronavirusDataService.getCountryWiseCoronavirusData().subscribe(\n      data=>{\n        this.continentWiseData=data.filter(function(d){\n          return continentList.includes(d.country)\n        });\n        this.continentWiseData=this.continentWiseData.filter(\n          function(e){\n            return !unwantedList.includes(e.country)\n        });\n      }\n    )\n\n  }\n\n}\n","<div class=\"container text-center\">\n\n    <div class=\"card-header\">\n        {{pageTitle}}\n    </div>\n    <table class=\"table table-bordered tableFixHead\">\n        <thead>\n            <tr>\n                <th>Country</th>\n                <th>Total Cases</th>\n                <th>New Cases</th>\n                <th>Total Deaths</th>\n                <th>New Deaths</th>\n                <th>Total Recovered</th>\n                <th>Active Cases</th>\n                <th>Serious or Critical</th>\n                <th>Total Cases per 1M</th>\n                <th>Total Deaths per 1M</th>\n                <th>Total Tests</th>\n                <th>Total Deaths per 1M</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let continent of continentWiseData\">\n                <td><a [routerLink]=\"['/countries',continent.country]\">{{continent.country}}</a></td>\n                <td>{{continent.cases |number}}</td>\n                <td>{{continent.todayCases |number}}</td>\n                <td>{{continent.deaths |number}}</td>\n                <td>{{continent.todayDeaths |number}}</td>\n                <td>{{continent.recovered |number}}</td>\n                <td>{{continent.active |number}}</td>\n                <td>{{continent.critical |number}}</td>\n                <td>{{continent.casesPerOneMillion |number}}</td>\n                <td>{{continent.deathsPerOneMillion |number}}</td>\n                <td>{{continent.totalTests |number}}</td>\n                <td>{{continent.testsPerOneMillion |number}}</td>\n            </tr>\n        </tbody>\n    </table>\n    </div>\n","import { Component, OnInit } from '@angular/core';\nimport { CoronavirusDataService } from 'src/app/services/coronavirus-data.service';\nimport { ICountryData } from 'src/app/interfaces/icountry-data';\n\n@Component({\n  selector: 'app-countries-list',\n  templateUrl: './countries-list.component.html',\n  styleUrls: ['./countries-list.component.css']\n})\nexport class CountriesListComponent implements OnInit {\n\n  countryWiseData:ICountryData[]=[];\n  filteredCountryWiseData:ICountryData[];\n\n  continentList:string[]=[\n    'North America','South America','Europe','Africa','Asia','Antartica','Oceania'\n  ];\n\n  unwantedList:string[]=[\n    '','Total:','World'\n  ];\n\n  _listFilter: string = '';\n\n  public get listFilter(): string {\n    return this._listFilter;\n  }\n\n  public set listFilter(value: string) {\n    this._listFilter = value;\n    this.filteredCountryWiseData= this._listFilter?this.performFilter(this._listFilter):this.countryWiseData;\n  }\n\n  pageTitle:string='Confirmed Cases and Deaths by Country, Territory, or Conveyance';\n\n  constructor(private coronavirusDataService: CoronavirusDataService) { }\n\n  ngOnInit(): void {\n    this.getCountryWiseCoronavirusData(this.continentList,this.unwantedList);\n  }\n\n  getCountryWiseCoronavirusData(continentList:string[],unwantedList:string[]){\n    this.coronavirusDataService.getCountryWiseCoronavirusData().subscribe(\n      data=>{\n        this.countryWiseData=data.filter(function(d){\n          return !continentList.includes(d.country)\n        });\n        this.countryWiseData=this.countryWiseData.filter(\n          function(e){\n            return !unwantedList.includes(e.country)\n        });\n        this.filteredCountryWiseData=this.countryWiseData;\n      }\n    )\n  }\n\n  performFilter(filterBy:string):ICountryData[]{\n    filterBy= filterBy.toLocaleLowerCase();\n    return this.countryWiseData.filter((country:ICountryData)=>\n    country.country.toLocaleLowerCase().indexOf(filterBy)!==-1);\n  }\n\n\n}\n","<div class=\"container text-center\">\n\n    <div class=\"card-header\">\n        {{pageTitle}}\n    </div>\n    <br>\n    <div class=\"row\" class=\"text-right\">\n        <label>Search:</label> <input type=\"text\" [(ngModel)]='listFilter'/>\n    </div>\n    <table class=\"table table-bordered tableFixHead\">\n        <thead>\n            <tr>\n                <th>Country</th>\n                <th>Total Cases</th>\n                <th>New Cases</th>\n                <th>Total Deaths</th>\n                <th>New Deaths</th>\n                <th>Total Recovered</th>\n                <th>Active Cases</th>\n                <th>Serious or Critical</th>\n                <th>Total Cases per 1M</th>\n                <th>Total Deaths per 1M</th>\n                <th>Total Tests</th>\n                <th>Total Deaths per 1M</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let country of filteredCountryWiseData\">\n                <td><a [routerLink]=\"['/countries',country.country]\">{{country.country}}</a></td>\n                <td>{{country.cases |number}}</td>\n                <td>{{country.todayCases |number}}</td>\n                <td>{{country.deaths |number}}</td>\n                <td>{{country.todayDeaths |number}}</td>\n                <td>{{country.recovered |number}}</td>\n                <td>{{country.active |number}}</td>\n                <td>{{country.critical |number}}</td>\n                <td>{{country.casesPerOneMillion |number}}</td>\n                <td>{{country.deathsPerOneMillion |number}}</td>\n                <td>{{country.totalTests |number}}</td>\n                <td>{{country.testsPerOneMillion |number}}</td>\n            </tr>\n        </tbody>\n    </table>\n    </div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoronavirusDataService } from 'src/app/services/coronavirus-data.service';\n\n@Component({\n  selector: 'app-country-detail',\n  templateUrl: './country-detail.component.html',\n  styleUrls: ['./country-detail.component.css']\n})\nexport class CountryDetailComponent implements OnInit {\n\n  public specificCountry;\n\n  id:string='';\n  constructor(private route: ActivatedRoute,private coronavirusDataService:CoronavirusDataService) { }\n\n  ngOnInit(): void {\n    this.id = this.route.snapshot.paramMap.get('id');\n    this.getCountryFromName(this.id);\n  }\n\n  getCountryFromName(id:string){\n    this.coronavirusDataService.getCountry(id).subscribe(\n      data=>{\n        this.specificCountry=data;\n      },\n      err=>console.error(err),\n      ()=>console.log('Specific Country Details Loaded')\n    );\n  }\n\n  \n}\n","<div class=\"card\">\n    <div class=\"card-header text-center\">\n        {{id | uppercase}}\n    </div>\n\n    <div class=\"container text-center\">\n        <h3>Coronavirus Cases:</h3>\n        <h5>{{specificCountry.cases | number}}</h5>\n\n        <h3>Deaths:</h3>\n        <h5>{{specificCountry.deaths | number}}</h5>\n\n        <h3>Recovered:</h3>\n        <h5>{{specificCountry.recovered | number}}</h5>\n\n    </div>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { CoronavirusDataService } from 'src/app/services/coronavirus-data.service';\nimport { IGlobalData } from 'src/app/interfaces/iglobal-data';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  pageTitle = 'COVID-19 CORONAVIRUS PANDEMIC';\n\n  public globalData:IGlobalData;\n  \n\n  constructor(private coronavirusDataService: CoronavirusDataService) { }\n\n  ngOnInit(): void {\n    this.getCoronavirusGlobalData();\n  }\n\n  getCoronavirusGlobalData(){\n    this.coronavirusDataService.getGlobalCoronavirusData().subscribe(\n      data=>{\n        this.globalData=data;\n      }\n    );\n  }\n\n}\n","<div class=\"card\">\n    <div class=\"card-header text-center\">\n      {{pageTitle}}\n    </div>\n    <div class=\"card-body\">\n      <div class=\"container-fluid\">\n        <div class=\"text-center\">\n          <img src=\"./assets/images/coronavirus.jpg\"\n               class=\"img-responsive center-block\"\n               style=\"max-height:300px;padding-bottom:50px\" />\n        </div>\n\n        <div class=\"container\" *ngIf=\"globalData\" class=\"text-center\">\n\n          <h3>Coronavirus Cases:</h3>\n          <p>{{globalData.cases | number}}</p>\n\n          <h3>Deaths:</h3>\n          <p>{{globalData.deaths | number}}</p>\n\n          <h3>Recovered:</h3>\n          <p>{{globalData.recovered | number}}</p>\n\n        </div>\n\n      </div>\n    </div>\n  </div>\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'countryFilter'\n})\nexport class CountryFilterPipe implements PipeTransform {\n\n  transform(value: unknown, ...args: unknown[]): unknown {\n    return null;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { IGlobalData } from '../interfaces/iglobal-data';\nimport {tap,catchError} from 'rxjs/operators';\nimport { ICountryData } from '../interfaces/icountry-data';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CoronavirusDataService {\n\n  private globalDataurl='https://coronavirus-19-api.herokuapp.com/all';\n\n  private countryWiseUrl='https://coronavirus-19-api.herokuapp.com/countries';\n\n  constructor(private http:HttpClient) { }\n\n  getGlobalCoronavirusData():Observable<IGlobalData>{\n\n    return this.http.get<IGlobalData>(this.globalDataurl).pipe(\n      tap(data=>console.log('All: '+JSON.stringify(data))),\n      catchError(this.handleError)\n    );\n\n  }\n\n  getCountryWiseCoronavirusData():Observable<ICountryData[]>{\n\n    return this.http.get<ICountryData[]>(this.countryWiseUrl).pipe(\n      catchError(this.handleError)\n    );\n\n  }\n\n  getCountry(id:string){\n    return this.http.get(this.countryWiseUrl+'/'+id);\n  }\n\n\n\n  private handleError(err: HttpErrorResponse){\n    let errorMessage='';\n    if(err.error instanceof ErrorEvent){\n        errorMessage=`An error occured: ${err.error.message}`;\n    }else{\n        errorMessage=`Server returned code: ${err.status},error message is ${err.message}`;\n    }\n    return throwError(errorMessage);\n\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}