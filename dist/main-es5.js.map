{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/continent-list/continent-list.component.ts","webpack:///src/app/components/continent-list/continent-list.component.html","webpack:///src/app/components/countries-list/countries-list.component.ts","webpack:///src/app/components/countries-list/countries-list.component.html","webpack:///src/app/components/country-detail/country-detail.component.ts","webpack:///src/app/components/country-detail/country-detail.component.html","webpack:///src/app/components/home/home.component.ts","webpack:///src/app/components/home/home.component.html","webpack:///src/app/pipes/country-filter.pipe.ts","webpack:///src/app/services/coronavirus-data.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","ContinentListComponent","coronavirusDataService","continentList","unwantedList","continentWiseData","pageTitle","getContinentWiseCoronavirusData","getCountryWiseCoronavirusData","subscribe","data","filter","d","includes","country","CountriesListComponent","countryWiseData","_listFilter","filteredCountryWiseData","filterBy","toLocaleLowerCase","indexOf","value","performFilter","CountryDetailComponent","route","snapshot","paramMap","get","getCountryFromName","getCountry","specificCountry","err","console","error","log","HomeComponent","getCoronavirusGlobalData","getGlobalCoronavirusData","globalData","CountryFilterPipe","name","CoronavirusDataService","http","globalDataurl","countryWiseUrl","pipe","JSON","stringify","handleError","errorMessage","ErrorEvent","message","status","providedIn","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './components/home/home.component';\nimport { CountriesListComponent } from './components/countries-list/countries-list.component';\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\nimport { ContinentListComponent } from './components/continent-list/continent-list.component';\n\n\nconst routes: Routes = [\n  {\n  path:'home', component:HomeComponent\n },\n {\n  path:'', redirectTo:'home',pathMatch:'full'\n},\n{\n  path:'**', redirectTo:'home',pathMatch:'full'\n},\n {\n   path:'countries', component:CountriesListComponent\n },\n {\n   path:'countries/:id', component:CountryDetailComponent\n },\n {\n   path:'continents',component:ContinentListComponent\n }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'Corona Virus Tracker';\n}\n","<nav class='navbar navbar-expand-lg navbar-light blue primary-color'>\n  <a class=\"navbar-brand\">{{title}}</a>\n  <ul class=\"nav navbar-nav\">\n      <li><a class=\"nav-link\" [routerLink]=\"['/home']\">Global</a></li>\n      <li><a class=\"nav-link\" [routerLink]=\"['/countries']\">Countries</a></li>\n      <li><a class=\"nav-link\" [routerLink]=\"['/continents']\">Continents</a></li>\n    </ul>\n</nav>\n<div class=\"container\">\n  <router-outlet></router-outlet>\n</div>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport {HttpClientModule} from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\n\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { CountriesListComponent } from './components/countries-list/countries-list.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { CountryDetailComponent } from './components/country-detail/country-detail.component';\nimport { CountryFilterPipe } from './pipes/country-filter.pipe';\nimport { ContinentListComponent } from './components/continent-list/continent-list.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CountriesListComponent,\n    HomeComponent,\n    CountryDetailComponent,\n    CountryFilterPipe,\n    ContinentListComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { CoronavirusDataService } from 'src/app/services/coronavirus-data.service';\nimport { ICountryData } from 'src/app/interfaces/icountry-data';\n\n@Component({\n  selector: 'app-continent-list',\n  templateUrl: './continent-list.component.html',\n  styleUrls: ['./continent-list.component.css']\n})\nexport class ContinentListComponent implements OnInit {\n\n  continentList:string[]=[\n    'North America','South America','Europe','Africa','Asia','Antartica','Oceania'\n  ];\n\n  unwantedList:string[]=[\n    '','Total:','World'\n  ];\n\n  continentWiseData:ICountryData[]=[];\n\n  pageTitle:string='Confirmed Cases and Deaths by Continent';\n\n  constructor(private coronavirusDataService:CoronavirusDataService) { }\n\n  ngOnInit(): void {\n    this.getContinentWiseCoronavirusData(this.continentList,this.unwantedList);\n  }\n\n  getContinentWiseCoronavirusData(continentList:string[],unwantedList:string[]){\n\n    this.coronavirusDataService.getCountryWiseCoronavirusData().subscribe(\n      data=>{\n        this.continentWiseData=data.filter(function(d){\n          return continentList.includes(d.country)\n        });\n        this.continentWiseData=this.continentWiseData.filter(\n          function(e){\n            return !unwantedList.includes(e.country)\n        });\n      }\n    )\n\n  }\n\n}\n","<div class=\"container text-center\">\n\n    <div class=\"card-header\">\n        {{pageTitle}}\n    </div>\n    <table class=\"table table-bordered tableFixHead\">\n        <thead>\n            <tr>\n                <th>Country</th>\n                <th>Total Cases</th>\n                <th>New Cases</th>\n                <th>Total Deaths</th>\n                <th>New Deaths</th>\n                <th>Total Recovered</th>\n                <th>Active Cases</th>\n                <th>Serious or Critical</th>\n                <th>Total Cases per 1M</th>\n                <th>Total Deaths per 1M</th>\n                <th>Total Tests</th>\n                <th>Total Deaths per 1M</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let continent of continentWiseData\">\n                <td><a [routerLink]=\"['/countries',continent.country]\">{{continent.country}}</a></td>\n                <td>{{continent.cases |number}}</td>\n                <td>{{continent.todayCases |number}}</td>\n                <td>{{continent.deaths |number}}</td>\n                <td>{{continent.todayDeaths |number}}</td>\n                <td>{{continent.recovered |number}}</td>\n                <td>{{continent.active |number}}</td>\n                <td>{{continent.critical |number}}</td>\n                <td>{{continent.casesPerOneMillion |number}}</td>\n                <td>{{continent.deathsPerOneMillion |number}}</td>\n                <td>{{continent.totalTests |number}}</td>\n                <td>{{continent.testsPerOneMillion |number}}</td>\n            </tr>\n        </tbody>\n    </table>\n    </div>\n","import { Component, OnInit } from '@angular/core';\nimport { CoronavirusDataService } from 'src/app/services/coronavirus-data.service';\nimport { ICountryData } from 'src/app/interfaces/icountry-data';\n\n@Component({\n  selector: 'app-countries-list',\n  templateUrl: './countries-list.component.html',\n  styleUrls: ['./countries-list.component.css']\n})\nexport class CountriesListComponent implements OnInit {\n\n  countryWiseData:ICountryData[]=[];\n  filteredCountryWiseData:ICountryData[];\n\n  continentList:string[]=[\n    'North America','South America','Europe','Africa','Asia','Antartica','Oceania'\n  ];\n\n  unwantedList:string[]=[\n    '','Total:','World'\n  ];\n\n  _listFilter: string = '';\n\n  public get listFilter(): string {\n    return this._listFilter;\n  }\n\n  public set listFilter(value: string) {\n    this._listFilter = value;\n    this.filteredCountryWiseData= this._listFilter?this.performFilter(this._listFilter):this.countryWiseData;\n  }\n\n  pageTitle:string='Confirmed Cases and Deaths by Country, Territory, or Conveyance';\n\n  constructor(private coronavirusDataService: CoronavirusDataService) { }\n\n  ngOnInit(): void {\n    this.getCountryWiseCoronavirusData(this.continentList,this.unwantedList);\n  }\n\n  getCountryWiseCoronavirusData(continentList:string[],unwantedList:string[]){\n    this.coronavirusDataService.getCountryWiseCoronavirusData().subscribe(\n      data=>{\n        this.countryWiseData=data.filter(function(d){\n          return !continentList.includes(d.country)\n        });\n        this.countryWiseData=this.countryWiseData.filter(\n          function(e){\n            return !unwantedList.includes(e.country)\n        });\n        this.filteredCountryWiseData=this.countryWiseData;\n      }\n    )\n  }\n\n  performFilter(filterBy:string):ICountryData[]{\n    filterBy= filterBy.toLocaleLowerCase();\n    return this.countryWiseData.filter((country:ICountryData)=>\n    country.country.toLocaleLowerCase().indexOf(filterBy)!==-1);\n  }\n\n\n}\n","<div class=\"container text-center\">\n\n    <div class=\"card-header\">\n        {{pageTitle}}\n    </div>\n    <br>\n    <div class=\"row\" class=\"text-right\">\n        <label>Search:</label> <input type=\"text\" [(ngModel)]='listFilter'/>\n    </div>\n    <table class=\"table table-bordered tableFixHead\">\n        <thead>\n            <tr>\n                <th>Country</th>\n                <th>Total Cases</th>\n                <th>New Cases</th>\n                <th>Total Deaths</th>\n                <th>New Deaths</th>\n                <th>Total Recovered</th>\n                <th>Active Cases</th>\n                <th>Serious or Critical</th>\n                <th>Total Cases per 1M</th>\n                <th>Total Deaths per 1M</th>\n                <th>Total Tests</th>\n                <th>Total Deaths per 1M</th>\n            </tr>\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let country of filteredCountryWiseData\">\n                <td><a [routerLink]=\"['/countries',country.country]\">{{country.country}}</a></td>\n                <td>{{country.cases |number}}</td>\n                <td>{{country.todayCases |number}}</td>\n                <td>{{country.deaths |number}}</td>\n                <td>{{country.todayDeaths |number}}</td>\n                <td>{{country.recovered |number}}</td>\n                <td>{{country.active |number}}</td>\n                <td>{{country.critical |number}}</td>\n                <td>{{country.casesPerOneMillion |number}}</td>\n                <td>{{country.deathsPerOneMillion |number}}</td>\n                <td>{{country.totalTests |number}}</td>\n                <td>{{country.testsPerOneMillion |number}}</td>\n            </tr>\n        </tbody>\n    </table>\n    </div>","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { CoronavirusDataService } from 'src/app/services/coronavirus-data.service';\n\n@Component({\n  selector: 'app-country-detail',\n  templateUrl: './country-detail.component.html',\n  styleUrls: ['./country-detail.component.css']\n})\nexport class CountryDetailComponent implements OnInit {\n\n  public specificCountry;\n\n  id:string='';\n  constructor(private route: ActivatedRoute,private coronavirusDataService:CoronavirusDataService) { }\n\n  ngOnInit(): void {\n    this.id = this.route.snapshot.paramMap.get('id');\n    this.getCountryFromName(this.id);\n  }\n\n  getCountryFromName(id:string){\n    this.coronavirusDataService.getCountry(id).subscribe(\n      data=>{\n        this.specificCountry=data;\n      },\n      err=>console.error(err),\n      ()=>console.log('Specific Country Details Loaded')\n    );\n  }\n\n  \n}\n","<div class=\"card\">\n    <div class=\"card-header text-center\">\n        {{id | uppercase}}\n    </div>\n\n    <div class=\"container text-center\">\n        <h3>Coronavirus Cases:</h3>\n        <h5>{{specificCountry.cases | number}}</h5>\n\n        <h3>Deaths:</h3>\n        <h5>{{specificCountry.deaths | number}}</h5>\n\n        <h3>Recovered:</h3>\n        <h5>{{specificCountry.recovered | number}}</h5>\n\n    </div>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { CoronavirusDataService } from 'src/app/services/coronavirus-data.service';\nimport { IGlobalData } from 'src/app/interfaces/iglobal-data';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  pageTitle = 'COVID-19 CORONAVIRUS PANDEMIC';\n\n  public globalData:IGlobalData;\n  \n\n  constructor(private coronavirusDataService: CoronavirusDataService) { }\n\n  ngOnInit(): void {\n    this.getCoronavirusGlobalData();\n  }\n\n  getCoronavirusGlobalData(){\n    this.coronavirusDataService.getGlobalCoronavirusData().subscribe(\n      data=>{\n        this.globalData=data;\n      }\n    );\n  }\n\n}\n","<div class=\"card\">\n    <div class=\"card-header text-center\">\n      {{pageTitle}}\n    </div>\n    <div class=\"card-body\">\n      <div class=\"container-fluid\">\n        <div class=\"text-center\">\n          <img src=\"./assets/images/coronavirus.jpg\"\n               class=\"img-responsive center-block\"\n               style=\"max-height:300px;padding-bottom:50px\" />\n        </div>\n\n        <div class=\"container\" *ngIf=\"globalData\" class=\"text-center\">\n\n          <h3>Coronavirus Cases:</h3>\n          <p>{{globalData.cases | number}}</p>\n\n          <h3>Deaths:</h3>\n          <p>{{globalData.deaths | number}}</p>\n\n          <h3>Recovered:</h3>\n          <p>{{globalData.recovered | number}}</p>\n\n        </div>\n\n      </div>\n    </div>\n  </div>\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'countryFilter'\n})\nexport class CountryFilterPipe implements PipeTransform {\n\n  transform(value: unknown, ...args: unknown[]): unknown {\n    return null;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { IGlobalData } from '../interfaces/iglobal-data';\nimport {tap,catchError} from 'rxjs/operators';\nimport { ICountryData } from '../interfaces/icountry-data';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CoronavirusDataService {\n\n  private globalDataurl='https://coronavirus-19-api.herokuapp.com/all';\n\n  private countryWiseUrl='https://coronavirus-19-api.herokuapp.com/countries';\n\n  constructor(private http:HttpClient) { }\n\n  getGlobalCoronavirusData():Observable<IGlobalData>{\n\n    return this.http.get<IGlobalData>(this.globalDataurl).pipe(\n      tap(data=>console.log('All: '+JSON.stringify(data))),\n      catchError(this.handleError)\n    );\n\n  }\n\n  getCountryWiseCoronavirusData():Observable<ICountryData[]>{\n\n    return this.http.get<ICountryData[]>(this.countryWiseUrl).pipe(\n      catchError(this.handleError)\n    );\n\n  }\n\n  getCountry(id:string){\n    return this.http.get(this.countryWiseUrl+'/'+id);\n  }\n\n\n\n  private handleError(err: HttpErrorResponse){\n    let errorMessage='';\n    if(err.error instanceof ErrorEvent){\n        errorMessage=`An error occured: ${err.error.message}`;\n    }else{\n        errorMessage=`Server returned code: ${err.status},error message is ${err.message}`;\n    }\n    return throwError(errorMessage);\n\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}